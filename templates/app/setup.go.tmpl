package app

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi"
	chimiddleware "github.com/go-chi/chi/middleware"
	"{{.ImportPath}}/controllers"
	"github.com/friendsofgo/errors"
	"github.com/spf13/pflag"
	"github.com/volatiletech/abcweb/v5/abcconfig"
	"github.com/volatiletech/abcweb/v5/abcmiddleware"
	"github.com/volatiletech/abcweb/v5/abcrender"
	{{if not .NoSessions -}}
	"github.com/volatiletech/abcweb/v5/abcsessions"
	{{- end}}
	"github.com/volatiletech/refresh/v3/refresh/web"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// App is the configuration state for the entire app.
// The controllers are passed variables from this object when initialized.
type App struct {
	Config    *Config
	Log		 *zap.Logger
	Router	 *chi.Mux
	Render	 abcrender.Renderer
	{{if not .NoSessions -}}
	Session abcsessions.Overseer
	{{- end}}
	AssetsManifest map[string]string
}

// Config holds the configuration for the app.
// It embeds abcconfig.AppConfig so that it can hold the
// Env, DB and Server configuration.
//
// If you did not wish to use ALL abcconfig.AppConfig members you could add
// them as individual members opposed to embedding abcconfig.AppConfig,
// i.e: Server abcconfig.ServerConfig `toml:"server" mapstructure:"server"`
type Config struct {
	// embed AppConfig
	abcconfig.AppConfig

	// Custom configuration can be added here.
}

// NewConfig creates the configuration by reading env & files
func NewConfig(flags *pflag.FlagSet) (*Config, error) {
	cfg := new(Config)
	c := abcconfig.NewConfig("{{.AppEnvName}}")
	if _, err := c.Bind(flags, cfg); err != nil {
		return nil, errors.Wrap(err, "cannot bind app config")
	}
	return cfg, nil
}

// NewRootController builds the root controller
func NewRootController(renderer abcrender.Renderer {{- if not .NoSessions}}, sessions abcsessions.Overseer{{end}}) controllers.Root {
	// The common state for each route handler
	return controllers.Root{
		Render:  renderer,
		{{if not .NoSessions -}}
		Session: sessions,
		{{- end}}
	}
}

// NewErrorManager creates a new error manager
func NewErrorManager(renderer abcrender.Renderer) *abcmiddleware.ErrorManager {
	// The empty string here can be replaced for a specific layout for errors
	return abcmiddleware.NewErrorManager(renderer, "layouts/errors")
}

// NewManifest makes an assets manifest if it's set in the config
func NewManifest(cfg *Config) (map[string]string, error) {
	if !cfg.AppConfig.Server.AssetsManifest {
		return nil, nil
	}

	manifest, err := abcrender.GetManifest(cfg.Server.PublicPath)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("cannot get assets manifest cache at path %q", cfg.Server.PublicPath))
	}

	return manifest, nil
}

// NewLogger returns a new zap logger
func NewLogger(cfg *Config) (*zap.Logger, error) {
	var zapCfg zap.Config

	// JSON logging for production. Should be coupled with a log analyzer
	// like newrelic, elk, logstash etc.
	if cfg.Server.ProdLogger {
		zapCfg = zap.NewProductionConfig()
	} else { // Enable colored logging
		zapCfg = zap.NewDevelopmentConfig()
		zapCfg.EncoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder
	}

	// Change the log output from os.Stderr to os.Stdout to prevent
	// the abcweb dev command from displaying duplicate lines
	zapCfg.OutputPaths = []string{"stdout"}

	logger, err := zapCfg.Build()
	if err != nil {
		return nil, errors.Wrap(err, "cannot create new logger")
	}
	
	return logger, nil
}

{{if not .NoSessions -}}
// NewSessions returns a new abcsessions overseer
func NewSessions(cfg *Config) (abcsessions.Overseer, error) {
	// Configure cookie options
	opts := abcsessions.NewCookieOptions()
	// If not using HTTPS, disable cookie secure flag
	if len(cfg.Server.TLSBind) == 0 {
		opts.Secure = false
	}

	var overseer abcsessions.Overseer
	
	err := func() error {
		if cfg.Server.SessionsDevStorer {
			{{if eq .DevStorer "cookie" -}}
			overseer = abcsessions.NewCookieOverseer(opts, []byte("{{randString 32}}"))
			{{- else if eq .DevStorer "memory" -}}
			storer, err := abcsessions.NewDefaultMemoryStorer()
			if err != nil {
				return err
			}
			overseer = abcsessions.NewStorageOverseer(opts, storer)
			{{- else if eq .DevStorer "disk" -}}
			storer, err := abcsessions.NewDefaultDiskStorer("{{randString 8}}")
			if err != nil {
				return err
			}
			storer.StartCleaner()
			overseer = abcsessions.NewStorageOverseer(opts, storer)
			{{- else if eq .DevStorer "redis" -}}
			// localhost:6379, no password, 0th indexed database.
			storer, err := abcsessions.NewDefaultRedisStorer("", "", 0)
			if err != nil {
				return err
			}
			overseer = abcsessions.NewStorageOverseer(opts, storer)
			{{- end}}
		} else {
			{{if eq .ProdStorer "cookie" -}}
			cfg.Session = abcsessions.NewCookieOverseer(opts, []byte("{{randString 32}}"))
			{{- else if eq .ProdStorer "memory" -}}
			storer, err := abcsessions.NewDefaultMemoryStorer()
			if err != nil {
				return err
			}
			overseer = abcsessions.NewStorageOverseer(opts, storer)
			{{- else if eq .ProdStorer "disk" -}}
			storer, err := abcsessions.NewDefaultDiskStorer("{{randString 8}}")
			if err != nil {
				return err
			}
			storer.StartCleaner()
			overseer = abcsessions.NewStorageOverseer(opts, storer)
			{{- else if eq .ProdStorer "redis" -}}
			// localhost:6379, no password, 0th indexed database.
			storer, err := abcsessions.NewDefaultRedisStorer("", "", 0)
			if err != nil {
				return err
			}
			overseer = abcsessions.NewStorageOverseer(opts, storer)
			{{- end}}
		}
		return nil
	}()

	if err != nil {
		return nil, errors.Wrap(err, "cannot create new sessions overseer")
	}

	return overseer, nil
}
{{- end}}

// NewMiddlewares returns a list of middleware to be used by the router.
// See https://github.com/go-chi/chi#middlewares and abcweb readme for extras.
func NewMiddlewares(cfg *Config,{{if not .NoSessions}} sessions abcsessions.Overseer,{{end}} log *zap.Logger, renderer abcrender.Renderer) []abcmiddleware.MiddlewareFunc {
	middlewares := []abcmiddleware.MiddlewareFunc{}
	
	// Display "abcweb dev" build errors in the browser.
	if !cfg.Server.ProdLogger {
		middlewares = append(middlewares, web.ErrorChecker)
	}

	// Injects a request ID into the context of each request
	middlewares = append(middlewares, chimiddleware.RequestID)

	// Creates the derived request ID logger and sets it in the context object.
	// Use middleware.Log(r) to retrieve it from the context object for usage in
	// other middleware injected below this one, and in your controllers.
	requestIDMiddleware := abcmiddleware.ZapRequestIDLogger(log)
	middlewares = append(middlewares, requestIDMiddleware.Wrap)

	// Graceful panic recovery that uses zap to log the stack trace
	recoverMiddleware := abcmiddleware.ZapRecover(log, func(w http.ResponseWriter, r *http.Request) {
		requestID := chimiddleware.GetReqID(r.Context())
		renderer.HTMLWithLayout(w, http.StatusInternalServerError, "errors/500", requestID, "layouts/errors")
	})
	middlewares = append(middlewares, recoverMiddleware.Wrap)

	// Use zap logger for all routing
	loggerMiddleware := abcmiddleware.ZapLog(log)
	middlewares = append(middlewares, loggerMiddleware.Wrap)

	// Sets response headers to prevent clients from caching
	if cfg.Server.AssetsNoCache {
		middlewares = append(middlewares, chimiddleware.NoCache)
	}

	{{if not .NoSessions -}}
	// Convert the ResponseWriter object to a SessionsResponse for buffering
	// session cookies across session API requests.
	//
	// MiddlewareWithReset also resets the expiry of the active session
	// on each web request.
	// 
	// Note: This (or abcsessions.Middleware instead) is a mandatory middleware
	// when using the abcsessions library. If you do not want the refresh
	// component you can replace this call with abcsessions.Middleware.
	middlewares = append(middlewares, sessions.MiddlewareWithReset)
	{{- end}}

	return middlewares
}
